"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[301],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return g}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(n),g=o,m=u["".concat(s,".").concat(g)]||u[g]||c[g]||i;return n?a.createElement(m,r(r({ref:t},p),{},{components:n})):a.createElement(m,r({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var d=2;d<i;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7974:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return p}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=["components"],l={title:"Dialogs",slug:"dialogs"},s=void 0,d={unversionedId:"dialogs",id:"dialogs",title:"Dialogs",description:"The dialog functions provide you with the opportunity to interact with the user through modal windows that appear in",source:"@site/docs/dialogs.md",sourceDirName:".",slug:"/dialogs",permalink:"/chayns-api/docs/dialogs",editUrl:"https://github.com/TobitSoftware/chayns-api/edit/main/docs/docs/dialogs.md",tags:[],version:"current",frontMatter:{title:"Dialogs",slug:"dialogs"},sidebar:"docs",previous:{title:"Getting Started",permalink:"/chayns-api/docs/"},next:{title:"Contributing",permalink:"/chayns-api/docs/contributing"}},p=[{value:"Example dialogs:",id:"example-dialogs",children:[{value:"Alert dialog:",id:"alert-dialog",children:[],level:3},{value:"Input dialog",id:"input-dialog",children:[],level:3},{value:"IFrame dialog",id:"iframe-dialog",children:[],level:3}],level:2}],c={toc:p};function u(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The dialog functions provide you with the opportunity to interact with the user through modal windows that appear in\nfront of the page. They can be used to inform the user about a task and may contain important information, require\ndecisions, or involve multiple tasks."),(0,i.kt)("p",null,"The old dialogs can be found under the import ",(0,i.kt)("inlineCode",{parentName:"p"},"dialog"),", while the new ones are created through the function ",(0,i.kt)("inlineCode",{parentName:"p"},"createDialoge"),".\nOnly the new IFrame dialogs support API V5. Unlike the old dialogs, it is possible to open another dialog from a dialog."),(0,i.kt)("h2",{id:"example-dialogs"},"Example dialogs:"),(0,i.kt)("h3",{id:"alert-dialog"},"Alert dialog:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { createDialog, DialogType } from 'chayns-api';\n\nconst result = await createDialog({type: DialogType.ALERT, text: 'Hello World!'}).open();\n")),(0,i.kt)("h3",{id:"input-dialog"},"Input dialog"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { createDialog, DialogType } from 'chayns-api';\n\nconst result = await createDialog({\n    type: DialogType.INPUT,\n    text: 'Hello World!',\n    placeholder: 'Write something'\n}).open();\n")),(0,i.kt)("h3",{id:"iframe-dialog"},"IFrame dialog"),(0,i.kt)("p",null,"The functions ",(0,i.kt)("inlineCode",{parentName:"p"},"addDataListener")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"dispatchEvent")," are only needed in exceptional cases, usually it is sufficient to pass data into the dialog via ",(0,i.kt)("inlineCode",{parentName:"p"},"dialogInput"),". The data can then be accessed in the dialog using the React hook ",(0,i.kt)("inlineCode",{parentName:"p"},"useDialogData"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { createDialog, DialogType, DialogButtonType } from 'chayns-api';\n\nconst dialog = await dialog = createDialog({\n    type: DialogType.IFRAME,\n    text: 'Hello world!',\n    buttons: [{text: 'Ok', type: DialogButtonType.OK}],\n    url: 'https://example.com/IFrameDialog.html',\n    dialogInput: {test: Math.random()} // can be accessed in the dialog through useDialogData hook \n});\n\n// receive data from dialog (optional)\ndialog.addDataListener((data) => {\n    console.log('received data from dialog', data);\n})\n\n// send data to iframe dialog (optional)\ndialog.dispatchEvent({type: 'test', data: Math.random()});\n\nconst result = await dialog.open();\n")),(0,i.kt)("p",null,"In the iframe dialog"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const { sendData, addDataListener, setResult, isClosingRequested } = useDialogState();\nconst dialogData = useDialogData();\n\nuseEffect(() => {\n    if (isClosingRequested) {\n        void setResult(Math.random());\n    }\n}, [isClosingRequested]);\n\nuseEffect(() => {\n    // data send from iframe to dialog (optional)\n    addDataListener((data) => {\n        console.log('received data from host', data);\n    });\n\n    // send data back to host (optional)\n    sendData({ type: 'test', data: { test: 1 } });\n}, [])\n\n")))}u.isMDXComponent=!0}}]);